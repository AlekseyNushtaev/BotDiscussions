import asyncio
from datetime import datetime

from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import bot

from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from collections import defaultdict
from typing import Dict, List
from config import ADMIN_IDS
from db.models import Session, Post
from handlers_admin import get_all_users_unblock
from keyboard import create_kb, kb_button, admin_keyboard

router = Router()

media_groups: Dict[str, List[Message]] = defaultdict(list)
timers: Dict[str, asyncio.Task] = {}
builder = InlineKeyboardBuilder()

builder.row(InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="quest_1"))
builder.row(InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª", url="https://t.me/andreikuvshinov"))

main_keyboard_markup = builder.as_markup()

class FSMFillForm(StatesGroup):
    send = State()
    text_add_button = State()
    check_text_1 = State()
    check_text_1_time = State()
    check_text_2 = State()
    check_text_2_time = State()
    text_add_button_text = State()
    text_add_button_url = State()
    photo_add_button = State()
    check_photo_1 = State()
    check_photo_1_time = State()
    check_photo_2 = State()
    check_photo_2_time = State()
    photo_add_button_text = State()
    photo_add_button_url = State()
    video_add_button = State()
    check_video_1 = State()
    check_video_1_time = State()
    check_video_2 = State()
    check_video_2_time = State()
    video_add_button_text = State()
    video_add_button_url = State()
    check_video_note_1 = State()
    check_video_note_1_time = State()


@router.callback_query(F.data == 'send', StateFilter(default_state), F.from_user.id.in_(ADMIN_IDS))
async def send_to_all(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text='üìù –°–µ–π—á–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —é–∑–µ—Ä–∞–º!\n'
                              '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üì® –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É üñºÔ∏è (–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –≤–∏–¥–µ–æ üé• (–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ ‚≠ï')
    await state.set_state(FSMFillForm.send)


#–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.text, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer(text='üîó –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='‚úÖ –î–∞', no='‚ùå –ù–µ—Ç'))
    await state.set_state(FSMFillForm.text_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.text_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    await cb.message.answer(text=dct['text'])
    await cb.message.answer(text='‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ?', reply_markup=create_kb(2, yes='‚úÖ –î–∞', no='‚ùå –ù–µ—Ç, —Å–±—Ä–æ—Å'))
    await state.set_state(FSMFillForm.check_text_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_text_1), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å',
                            reply_markup=create_kb(1, now='üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å'))
    await state.set_state(FSMFillForm.check_text_1_time)


@router.message(StateFilter(FSMFillForm.check_text_1_time), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_1_time(msg: Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        send_time = datetime.strptime(msg.text, '%d.%m.%y %H.%M')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if send_time <= datetime.now():
            await msg.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return

        dct = await state.get_data()
        async with Session() as session:
            post = Post(
                type="text",
                text=dct['text'],
                send_at=send_time
            )
            session.add(post)
            await session.commit()

        await msg.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {send_time.strftime('%d.%m.%Y %H:%M')}",
                         reply_markup=admin_keyboard)
        await state.clear()

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.23 15.30)")


@router.callback_query(F.data == 'now', StateFilter(FSMFillForm.check_text_1_time), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_1_time(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await asyncio.sleep(0.2)
            await bot.send_message(user_id, text=dct['text'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º', reply_markup=admin_keyboard)
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.text_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.text_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.text_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='üîó –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.text_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.text_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        await message.answer(text=dct['text'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ?', reply_markup=create_kb(2, yes='‚úÖ –î–∞', no='‚ùå –ù–µ—Ç, —Å–±—Ä–æ—Å'))
        await state.set_state(FSMFillForm.check_text_2)
    except Exception:
        await message.answer(text='‚ùå –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.text_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_text_2), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å',
                            reply_markup=create_kb(1, now='üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å'))
    await state.set_state(FSMFillForm.check_text_2_time)


@router.message(StateFilter(FSMFillForm.check_text_2_time), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_1_time(msg: Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        send_time = datetime.strptime(msg.text, '%d.%m.%y %H.%M')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if send_time <= datetime.now():
            await msg.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return

        dct = await state.get_data()
        async with Session() as session:
            post = Post(
                type="text",
                text=dct['text'],
                button_text=dct['button_text'],
                button_link=dct['button_url'],
                send_at=send_time
            )
            session.add(post)
            await session.commit()

        await msg.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {send_time.strftime('%d.%m.%Y %H:%M')}",
                         reply_markup=admin_keyboard)
        await state.clear()

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.23 15.30)")


@router.callback_query(F.data == 'now', StateFilter(FSMFillForm.check_text_2_time), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await asyncio.sleep(0.2)
            await bot.send_message(user_id, text=dct['text'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º', reply_markup=admin_keyboard)
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.photo, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    try:
        await state.update_data(caption=message.caption)
    except Exception:
        pass
    await message.answer(text='üîó –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='‚úÖ –î–∞', no='‚ùå –ù–µ—Ç'))
    await state.set_state(FSMFillForm.photo_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.photo_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    if dct.get('caption'):
        await cb.message.answer_photo(photo=dct['photo_id'], caption=dct['caption'])
    else:
        await cb.message.answer_photo(photo=dct['photo_id'])
    await cb.message.answer(text='‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ?', reply_markup=create_kb(2, yes='‚úÖ –î–∞', no='‚ùå –ù–µ—Ç, —Å–±—Ä–æ—Å'))
    await state.set_state(FSMFillForm.check_photo_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_photo_1), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å',
                            reply_markup=create_kb(1, now='üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å'))
    await state.set_state(FSMFillForm.check_photo_1_time)


@router.message(StateFilter(FSMFillForm.check_photo_1_time), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_1_time(msg: Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        send_time = datetime.strptime(msg.text, '%d.%m.%y %H.%M')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if send_time <= datetime.now():
            await msg.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return

        dct = await state.get_data()
        async with Session() as session:
            post = Post(
                type="photo",
                media=dct['photo_id'],
                text=dct.get('caption'),
                send_at=send_time
            )
            session.add(post)
            await session.commit()

        await msg.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {send_time.strftime('%d.%m.%Y %H:%M')}",
                         reply_markup=admin_keyboard)
        await state.clear()

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.23 15.30)")


@router.callback_query(F.data == 'now', StateFilter(FSMFillForm.check_photo_1_time), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await asyncio.sleep(0.2)
            if dct.get('caption'):
                await bot.send_photo(user_id, photo=dct['photo_id'], caption=dct['caption'])
            else:
                await bot.send_photo(user_id, photo=dct['photo_id'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º', reply_markup=admin_keyboard)
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.photo_add_button), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.photo_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.photo_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='üîó –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.photo_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.photo_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        if dct.get('caption'):
            await message.answer_photo(photo=dct['photo_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        else:
            await message.answer_photo(photo=dct['photo_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ?', reply_markup=create_kb(2, yes='‚úÖ –î–∞', no='‚ùå –ù–µ—Ç, —Å–±—Ä–æ—Å'))
        await state.set_state(FSMFillForm.check_photo_2)
    except Exception as e:
        print(e)
        await message.answer(text='‚ùå –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.photo_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_photo_2), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_2(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å',
                            reply_markup=create_kb(1, now='üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å'))
    await state.set_state(FSMFillForm.check_photo_2_time)


@router.message(StateFilter(FSMFillForm.check_photo_2_time), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_2_time(msg: Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        send_time = datetime.strptime(msg.text, '%d.%m.%y %H.%M')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if send_time <= datetime.now():
            await msg.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return

        dct = await state.get_data()
        async with Session() as session:
            post = Post(
                type="photo",
                media=dct['photo_id'],
                text=dct.get('caption'),
                button_text=dct['button_text'],
                button_link=dct['button_url'],
                send_at=send_time
            )
            session.add(post)
            await session.commit()

        await msg.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {send_time.strftime('%d.%m.%Y %H:%M')}",
                         reply_markup=admin_keyboard)
        await state.clear()

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.23 15.30)")


@router.callback_query(F.data == 'now', StateFilter(FSMFillForm.check_photo_2_time), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await asyncio.sleep(0.2)
            if dct.get('caption'):
                    await bot.send_photo(user_id, photo=dct['photo_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            else:
                await bot.send_photo(user_id, photo=dct['photo_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º', reply_markup=admin_keyboard)
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.video, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button(message: types.Message, state: FSMContext):
    await state.update_data(video_id=message.video.file_id)
    try:
        await state.update_data(caption=message.caption)
    except Exception:
        pass
    await message.answer(text='üîó –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='‚úÖ –î–∞', no='‚ùå –ù–µ—Ç'))
    await state.set_state(FSMFillForm.video_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.video_add_button), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    if dct.get('caption'):
        await cb.message.answer_video(video=dct['video_id'], caption=dct['caption'])
    else:
        await cb.message.answer_video(video=dct['video_id'])
    await cb.message.answer(text='‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ?', reply_markup=create_kb(2, yes='‚úÖ –î–∞', no='‚ùå –ù–µ—Ç, —Å–±—Ä–æ—Å'))
    await state.set_state(FSMFillForm.check_video_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_1), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å',
                            reply_markup=create_kb(1, now='üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å'))
    await state.set_state(FSMFillForm.check_video_1_time)


@router.message(StateFilter(FSMFillForm.check_video_1_time), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_1_time(msg: Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        send_time = datetime.strptime(msg.text, '%d.%m.%y %H.%M')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if send_time <= datetime.now():
            await msg.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return

        dct = await state.get_data()
        async with Session() as session:
            post = Post(
                type="video",
                media=dct['video_id'],
                text=dct.get('caption'),
                send_at=send_time
            )
            session.add(post)
            await session.commit()

        await msg.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {send_time.strftime('%d.%m.%Y %H:%M')}",
                         reply_markup=admin_keyboard)
        await state.clear()

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.23 15.30)")


@router.callback_query(F.data == 'now', StateFilter(FSMFillForm.check_video_1_time), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await asyncio.sleep(0.2)
            if dct.get('caption'):
                await bot.send_video(user_id, video=dct['video_id'], caption=dct['caption'])
            else:
                await bot.send_video(user_id, video=dct['video_id'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º', reply_markup=admin_keyboard)
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.video_add_button), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.video_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.video_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='üîó –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.video_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.video_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        if dct.get('caption'):
            await message.answer_video(video=dct['video_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        else:
            await message.answer_video(video=dct['video_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ?', reply_markup=create_kb(2, yes='‚úÖ –î–∞', no='‚ùå –ù–µ—Ç, —Å–±—Ä–æ—Å'))
        await state.set_state(FSMFillForm.check_video_2)
    except Exception as e:
        print(e)
        await message.answer(text='‚ùå –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.video_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_2), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_2(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å',
                            reply_markup=create_kb(1, now='üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å'))
    await state.set_state(FSMFillForm.check_video_2_time)


@router.message(StateFilter(FSMFillForm.check_video_2_time), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_2_time(msg: Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        send_time = datetime.strptime(msg.text, '%d.%m.%y %H.%M')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if send_time <= datetime.now():
            await msg.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return

        dct = await state.get_data()
        async with Session() as session:
            post = Post(
                type="video",
                media=dct['video_id'],
                text=dct.get('caption'),
                button_text=dct['button_text'],
                button_link=dct['button_url'],
                send_at=send_time
            )
            session.add(post)
            await session.commit()

        await msg.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {send_time.strftime('%d.%m.%Y %H:%M')}",
                         reply_markup=admin_keyboard)
        await state.clear()

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.23 15.30)")


@router.callback_query(F.data == 'now', StateFilter(FSMFillForm.check_video_2_time), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_2_time(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await asyncio.sleep(0.2)
            if dct.get('caption'):
                await bot.send_video(user_id, video=dct['video_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            else:
                await bot.send_video(user_id, video=dct['video_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º', reply_markup=admin_keyboard)
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞


@router.message(F.video_note, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def video_note_check(message: types.Message, state: FSMContext):
    await state.update_data(video_note_id=message.video_note.file_id)
    await message.answer(text='üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å –≤ –∫—Ä—É–∂–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    await message.answer(text='‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ?', reply_markup=create_kb(2, yes='‚úÖ –î–∞', no='‚ùå –ù–µ—Ç, —Å–±—Ä–æ—Å'))
    await state.set_state(FSMFillForm.check_video_note_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_note_1), F.from_user.id.in_(ADMIN_IDS))
async def check_videonote_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–π—á–∞—Å',
                            reply_markup=create_kb(1, now='üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å'))
    await state.set_state(FSMFillForm.check_video_note_1_time)


@router.message(StateFilter(FSMFillForm.check_video_note_1_time), F.from_user.id.in_(ADMIN_IDS))
async def check_videonote_yes_1_time(msg: Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        send_time = datetime.strptime(msg.text, '%d.%m.%y %H.%M')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if send_time <= datetime.now():
            await msg.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return

        dct = await state.get_data()
        async with Session() as session:
            post = Post(
                type="videonote",
                media=dct['video_note_id'],
                send_at=send_time
            )
            session.add(post)
            await session.commit()

        await msg.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {send_time.strftime('%d.%m.%Y %H:%M')}",
                         reply_markup=admin_keyboard)
        await state.clear()

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.23 15.30)")


@router.callback_query(F.data == 'now', StateFilter(FSMFillForm.check_video_note_1_time), F.from_user.id.in_(ADMIN_IDS))
async def check_video_note_yes_1_time(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = await get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await asyncio.sleep(0.2)
            await bot.send_video_note(user_id, video_note=dct['video_note_id'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º', reply_markup=admin_keyboard)
    await state.set_state(default_state)
    await state.clear()


# –í—ã—Ö–æ–¥ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2,
                       FSMFillForm.check_photo_1, FSMFillForm.check_photo_2, FSMFillForm.check_video_1,
                       FSMFillForm.check_video_2, FSMFillForm.check_video_note_1), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=admin_keyboard)
    await cb.answer()
    await state.set_state(default_state)
    await state.clear()
