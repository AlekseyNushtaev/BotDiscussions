import math
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from sqlalchemy import select, desc

from db.models import Session, User, Question, Event
from config import ADMIN_IDS, STRINGS_PER_PAGE
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import datetime

from keyboard import get_main_keyboard

router = Router()


class AnswerState(StatesGroup):
    waiting_for_answer = State()


class EventState(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_date = State()
    waiting_for_video = State()


class EditEventState(StatesGroup):
    waiting_for_edit_choice = State()
    waiting_for_new_title = State()
    waiting_for_new_description = State()
    waiting_for_new_date = State()
    waiting_for_new_video = State()


@router.message(Command("start"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_start_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–æ–ø—Ä–æ—Å—ã", callback_data="admin_questions")],
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="admin_events")]
        ]
    )

    await message.answer(
        "–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        reply_markup=keyboard
    )


@router.message(F.text == "üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", F.from_user.id.in_(ADMIN_IDS))
async def main_menu_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–æ–ø—Ä–æ—Å—ã", callback_data="admin_questions")],
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="admin_events")]
        ]
    )

    await message.answer(
        "–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "admin_main")
async def admin_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–æ–ø—Ä–æ—Å—ã", callback_data="admin_questions")],
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="admin_events")]
        ]
    )

    await callback.message.edit_text(
        "–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "admin_questions")
async def admin_questions_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞", callback_data="view_unanswered:1")],
            [InlineKeyboardButton(text="–û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ", callback_data="view_answered:1")],
            [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
        ]
    )

    await callback.message.edit_text(
        "–†–∞–∑–¥–µ–ª –≤–æ–ø—Ä–æ—Å—ã",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("view_unanswered:"))
async def view_unanswered_questions(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = int(callback.data.split(":")[1])

    async with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        query = (select(Question)
                 .where(Question.answer == None)
                 .order_by(desc(Question.created_at))
                 .offset((page - 1) * STRINGS_PER_PAGE)
                 .limit(STRINGS_PER_PAGE))

        result = await session.execute(query)
        questions = result.scalars().all()

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        questions_with_users = []
        for question in questions:
            user_query = select(User).where(User.user_id == question.user_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            questions_with_users.append((question, user))

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        count_query = select(Question).where(Question.answer == None)
        count_result = await session.execute(count_query)
        total_questions = len(count_result.scalars().all())

    total_pages = math.ceil(total_questions / STRINGS_PER_PAGE)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    keyboard_buttons = []
    for question, user in questions_with_users:
        date_str = question.created_at.strftime("%d.%m.%y")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user:
            username = user.username if user.username else (
                user.first_name if user.first_name else (
                    user.last_name if user.last_name else f"ID{user.user_id}"
            ))
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
            username = f"ID{question.user_id}"

        button_text = f"{date_str} {username}"

        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(button_text) > 30:
            button_text = button_text[:27] + "..."

        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"question_detail:{question.id}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"view_unanswered:{page - 1}"
        ))

    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"view_unanswered:{page + 1}"
        ))

    if pagination_buttons:
        keyboard_buttons.append(pagination_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons.append([
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_questions")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ—Ç–≤–µ—Ç–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("view_answered:"))
async def view_answered_questions(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = int(callback.data.split(":")[1])

    async with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        query = (select(Question)
                 .where(Question.answer != None)
                 .order_by(desc(Question.answered_at))
                 .offset((page - 1) * STRINGS_PER_PAGE)
                 .limit(STRINGS_PER_PAGE))

        result = await session.execute(query)
        questions = result.scalars().all()

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        questions_with_users = []
        for question in questions:
            user_query = select(User).where(User.user_id == question.user_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            questions_with_users.append((question, user))

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        count_query = select(Question).where(Question.answer != None)
        count_result = await session.execute(count_query)
        total_questions = len(count_result.scalars().all())

    total_pages = math.ceil(total_questions / STRINGS_PER_PAGE)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    keyboard_buttons = []
    for question, user in questions_with_users:
        date_str = question.answered_at.strftime("%d.%m.%y") if question.answered_at else "??.??.??"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user:
            username = user.username if user.username else (
                user.first_name if user.first_name else f"ID{user.user_id}"
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
            username = f"ID{question.user_id}"

        button_text = f"{date_str} {username}"

        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(button_text) > 30:
            button_text = button_text[:27] + "..."

        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"question_detail:{question.id}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"view_answered:{page - 1}"
        ))

    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"view_answered:{page + 1}"
        ))

    if pagination_buttons:
        keyboard_buttons.append(pagination_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons.append([
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_questions")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(
        f"–û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):",
        reply_markup=keyboard
    )
    await callback.answer()


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@router.callback_query(F.data.startswith("question_detail:"))
async def question_detail(callback: CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–∞"""
    question_id = int(callback.data.split(":")[1])

    async with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        question_query = select(Question).where(Question.id == question_id)
        stmt = await session.execute(question_query)
        question = stmt.scalar_one_or_none()
        user_query = select(User).where(User.user_id == question.user_id)
        stmt = await session.execute(user_query)
        user = stmt.scalar_one_or_none()

        if not question:
            await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        date_str = question.created_at.strftime("%d.%m.%Y %H:%M")

        if user:
            user_info = user.username if user.username else f"ID{user.user_id}"
        else:
            user_info = f"ID{question.user_id}"

        text = f"–í–æ–ø—Ä–æ—Å –æ—Ç: {user_info}\n"
        text += f"–í—Ä–µ–º—è: {date_str}\n"
        text += f"–í–æ–ø—Ä–æ—Å: {question.question}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []

        if question.answer is None:
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–≤–µ—á–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å"
            keyboard_buttons.append([
                InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"answer_question:{question_id}")
            ])
        else:
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—á–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            answer_date = question.answered_at.strftime("%d.%m.%Y %H:%M") if question.answered_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            text += f"\n\n–û—Ç–≤–µ—Ç: {question.answer}\n"
            text += f"–û—Ç–≤–µ—Ç –¥–∞–Ω: {answer_date}"

        keyboard_buttons.append([
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="view_unanswered:1")
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data.startswith("answer_question:"))
async def start_answer(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    question_id = int(callback.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(AnswerState.waiting_for_answer)
    await state.update_data(question_id=question_id)

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
    await callback.answer()


@router.message(AnswerState.waiting_for_answer)
async def process_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    question_id = data['question_id']

    async with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        question_query = select(Question).where(Question.id == question_id)
        stmt = await session.execute(question_query)
        question = stmt.scalar_one_or_none()
        user_query = select(User).where(User.user_id == question.user_id)
        stmt = await session.execute(user_query)
        user = stmt.scalar_one_or_none()

        if question:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            question.answer = message.text
            question.answered_at = datetime.datetime.now()
            await session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await message.bot.send_message(
                    chat_id=question.user_id,
                    text=f"–í–∞—à –≤–æ–ø—Ä–æ—Å: {question.question}\n–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.text}",
                    reply_markup = get_main_keyboard()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            await view_unanswered_questions_internal(message, state, page=1)
        else:
            await message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await state.clear()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async def view_unanswered_questions_internal(message: Message, state: FSMContext, page: int):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    # –ö–æ–¥ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–∏ view_unanswered_questions, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    async with Session() as session:
        query = (select(Question)
                 .where(Question.answer == None)
                 .order_by(desc(Question.created_at))
                 .offset((page - 1) * STRINGS_PER_PAGE)
                 .limit(STRINGS_PER_PAGE))

        result = await session.execute(query)
        questions = result.scalars().all()

        questions_with_users = []
        for question in questions:
            user_query = select(User).where(User.user_id == question.user_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            questions_with_users.append((question, user))

        count_query = select(Question).where(Question.answer == None)
        count_result = await session.execute(count_query)
        total_questions = len(count_result.scalars().all())

    total_pages = math.ceil(total_questions / STRINGS_PER_PAGE)

    keyboard_buttons = []
    for question, user in questions_with_users:
        date_str = question.created_at.strftime("%d.%m.%y")

        if user:
            username = user.username if user.username else (
                user.first_name if user.first_name else (
                    user.last_name if user.last_name else f"ID{user.user_id}"
                ))
        else:
            username = f"ID{question.user_id}"

        button_text = f"{date_str} {username}"

        if len(button_text) > 30:
            button_text = button_text[:27] + "..."

        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"question_detail:{question.id}"
        )])

    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"view_unanswered:{page - 1}"
        ))

    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"view_unanswered:{page + 1}"
        ))

    if pagination_buttons:
        keyboard_buttons.append(pagination_buttons)

    keyboard_buttons.append([
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_questions")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await message.answer(
        f"–í–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ—Ç–≤–µ—Ç–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):",
        reply_markup=keyboard
    )


# –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
@router.callback_query(F.data == "admin_events")
async def admin_events_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="create_event")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="events_list")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
    )

    await callback.message.edit_text(
        "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "create_event")
async def start_create_event(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventState.waiting_for_title)
    await callback.answer()


@router.message(EventState.waiting_for_title)
async def process_event_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventState.waiting_for_description)


@router.message(EventState.waiting_for_description)
async def process_event_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.24):")
    await state.set_state(EventState.waiting_for_date)


@router.message(EventState.waiting_for_date)
async def process_event_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        event_date = datetime.datetime.strptime(message.text, "%d.%m.%y")

        await state.update_data(event_date=event_date)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–µ—Ç –≤–∏–¥–µ–æ", callback_data="no_video")]
            ]
        )

        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:",
            reply_markup=keyboard
        )
        await state.set_state(EventState.waiting_for_video)
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì(–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.24):")


@router.callback_query(F.data == "no_video", EventState.waiting_for_video)
async def process_no_video(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–∏–¥–µ–æ"""
    await process_event_final(callback.message, state, None)
    await callback.answer()


@router.message(EventState.waiting_for_video)
async def process_event_video(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ"""
    await process_event_final(message, state, message.text)


async def process_event_final(message: Message, state: FSMContext, video_url: str = None):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    data = await state.get_data()

    async with Session() as session:
        event = Event(
            title=data['title'],
            description=data['description'],
            event_date=data['event_date'],
            video_url=video_url,
            created_at=datetime.datetime.now()
        )
        session.add(event)
        await session.commit()

    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="create_event")],
            [InlineKeyboardButton(text="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="events_list")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_main")]
        ]
    )

    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=keyboard)
    await state.clear()


# –ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —ç—Ç–∏:

@router.callback_query(F.data == "events_list")
async def show_events_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    await _show_events_page(callback, page=1)


@router.callback_query(F.data.startswith("events_page:"))
async def view_events_page(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"""
    page = int(callback.data.split(":")[1])
    await _show_events_page(callback, page)


async def _show_events_page(callback: CallbackQuery, page: int):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"""
    async with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ
        query = (select(Event)
                 .order_by(desc(Event.event_date))
                 .offset((page - 1) * STRINGS_PER_PAGE)
                 .limit(STRINGS_PER_PAGE))

        result = await session.execute(query)
        events = result.scalars().all()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        count_query = select(Event)
        count_result = await session.execute(count_query)
        total_events = len(count_result.scalars().all())

    total_pages = math.ceil(total_events / STRINGS_PER_PAGE)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
    keyboard_buttons = []
    for event in events:
        date_str = event.event_date.strftime("%d.%m.%y")
        button_text = f"{date_str} {event.title}"

        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(button_text) > 30:
            button_text = button_text[:27] + "..."

        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"event_detail:{event.id}"  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å event_stub –Ω–∞ event_detail
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"events_page:{page - 1}"
        ))

    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"events_page:{page + 1}"
        ))

    if pagination_buttons:
        keyboard_buttons.append(pagination_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard_buttons.append([
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_events")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(
        f"–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("event_detail:"))
async def event_detail(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split(":")[1])

    async with Session() as session:
        event_query = select(Event).where(Event.id == event_id)
        result = await session.execute(event_query)
        event = result.scalar_one_or_none()

        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_str = event.event_date.strftime("%d.%m.%Y")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"<b>{event.title}</b>\n"
        text += f"<i>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {date_str}</i>\n\n"
        text += f"{event.description}"

        if event.video_url:
            text += f"\n\n<b>–í–∏–¥–µ–æ:</b> {event.video_url}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_event:{event_id}"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_event:{event_id}")
            ],
            [
                InlineKeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã", callback_data="reviews_stub")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="events_list")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data.startswith("delete_event:"))
async def delete_event(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split(":")[1])

    async with Session() as session:
        event_query = select(Event).where(Event.id == event_id)
        result = await session.execute(event_query)
        event = result.scalar_one_or_none()

        if event:
            await session.delete(event)
            await session.commit()
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        else:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:")
    await _show_events_page_internal(callback.message, page=1)


# –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
async def _show_events_page_internal(message: Message, page: int):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"""
    async with Session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ
        query = (select(Event)
                 .order_by(desc(Event.event_date))
                 .offset((page - 1) * STRINGS_PER_PAGE)
                 .limit(STRINGS_PER_PAGE))

        result = await session.execute(query)
        events = result.scalars().all()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        count_query = select(Event)
        count_result = await session.execute(count_query)
        total_events = len(count_result.scalars().all())

    total_pages = math.ceil(total_events / STRINGS_PER_PAGE)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
    keyboard_buttons = []
    for event in events:
        date_str = event.event_date.strftime("%d.%m.%y")
        button_text = f"{date_str} {event.title}"

        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(button_text) > 30:
            button_text = button_text[:27] + "..."

        keyboard_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"event_detail:{event.id}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"events_page:{page - 1}"
        ))

    if page < total_pages:
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"events_page:{page + 1}"
        ))

    if pagination_buttons:
        keyboard_buttons.append(pagination_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard_buttons.append([
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_events")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await message.answer(
        f"–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data.startswith("edit_event:"))
async def start_edit_event(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    event_id = int(callback.data.split(":")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(EditEventState.waiting_for_edit_choice)
    await state.update_data(event_id=event_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field:title")],
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field:description")],
            [InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="edit_field:date")],
            [InlineKeyboardButton(text="–í–∏–¥–µ–æ", callback_data="edit_field:video")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"event_detail:{event_id}")]
        ]
    )

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_field:"), EditEventState.waiting_for_edit_choice)
async def select_edit_field(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = callback.data.split(":")[1]
    data = await state.get_data()
    event_id = data['event_id']

    await state.update_data(edit_field=field)

    field_names = {
        "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
        "date": "–¥–∞—Ç—É",
        "video": "—Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ"
    }

    if field == "date":
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é {field_names[field]} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.24):")
        await state.set_state(EditEventState.waiting_for_new_date)
    elif field == "video":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="remove_video")]
            ]
        )
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é {field_names[field]} –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
            reply_markup=keyboard
        )
        await state.set_state(EditEventState.waiting_for_new_video)
    else:
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names[field]}:")
        await state.set_state(getattr(EditEventState, f"waiting_for_new_{field}"))

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—è
@router.message(EditEventState.waiting_for_new_title)
async def process_new_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    await update_event_field(message, state, "title", message.text)


@router.message(EditEventState.waiting_for_new_description)
async def process_new_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await update_event_field(message, state, "description", message.text)


@router.message(EditEventState.waiting_for_new_date)
async def process_new_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        event_date = datetime.datetime.strptime(message.text, "%d.%m.%y")
        await update_event_field(message, state, "event_date", event_date)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.24):")


@router.message(EditEventState.waiting_for_new_video)
async def process_new_video(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ"""
    await update_event_field(message, state, "video_url", message.text)


@router.callback_query(F.data == "remove_video", EditEventState.waiting_for_new_video)
async def process_remove_video(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ"""

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ update_event_field
    class TempMessage:
        def __init__(self, callback):
            self.message_id = callback.message.message_id
            self.chat = callback.message.chat
            self.answer = callback.message.answer
            self.bot = callback.bot

    temp_message = TempMessage(callback)
    await update_event_field(temp_message, state, "video_url", None)
    await callback.answer()


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
async def update_event_field(message: Message, state: FSMContext, field: str, value: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –ë–î"""
    data = await state.get_data()
    event_id = data['event_id']

    async with Session() as session:
        event_query = select(Event).where(Event.id == event_id)
        result = await session.execute(event_query)
        event = result.scalar_one_or_none()

        if event:
            setattr(event, field, value)
            await session.commit()
            await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
            await send_event_detail(message, event_id)
        else:
            await message.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    await state.clear()


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
async def send_event_detail(message: Message, event_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    async with Session() as session:
        event_query = select(Event).where(Event.id == event_id)
        result = await session.execute(event_query)
        event = result.scalar_one_or_none()

        if not event:
            await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        date_str = event.event_date.strftime("%d.%m.%Y")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"<b>{event.title}</b>\n"
        text += f"<i>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {date_str}</i>\n\n"
        text += f"{event.description}"

        if event.video_url:
            text += f"\n\n<b>–í–∏–¥–µ–æ:</b> {event.video_url}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_event:{event_id}"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_event:{event_id}")
            ],
            [
                InlineKeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã", callback_data="reviews_stub")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="events_list")
            ]
        ]
    )

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
@router.callback_query(F.data == "reviews_stub")
async def reviews_stub(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤"""
    await callback.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)